package com.bahadori.metropolitanmuseum.feature.search.data.remote.dto.response


import com.bahadori.metropolitanmuseum.core.database.model.MetObjectEntity
import com.google.gson.annotations.SerializedName


data class MetObjectDto(
    val objectID: Int?,
    val isHighlight: Boolean?,
    val accessionNumber: String?,
    val accessionYear: String?,
    val primaryImage: String?,
    val additionalImages: List<String?>?,
    val constituents: List<ConstituentDto?>?,
    val department: String?,
    val objectName: String?,
    val title: String?,
    val culture: String?,
    val period: String?,
    val dynasty: String?,
    val reign: String?,
    val portfolio: String?,
    val artistRole: String?,
    val artistPrefix: String?,
    val artistDisplayName: String?,
    val artistDisplayBio: String?,
    val artistSuffix: String?,
    val artistAlphaSort: String?,
    val artistNationality: String?,
    val artistBeginDate: String?,
    val artistEndDate: String?,
    val artistGender: String?,
    @SerializedName("artistWikidata_URL")
    val artistWikidataURL: String?,
    @SerializedName("artistULAN_URL")
    val artistULANURL: String?,
    val objectDate: String?,
    val objectBeginDate: Int?,
    val objectEndDate: Int?,
    val medium: String?,
    val dimensions: String?,
    val measurements: List<MeasurementDto?>?,
    val creditLine: String?,
    val geographyType: String?,
    val city: String?,
    val state: String?,
    val county: String?,
    val country: String?,
    val region: String?,
    val subregion: String?,
    val locale: String?,
    val locus: String?,
    val excavation: String?,
    val river: String?,
    val classification: String?,
    val rightsAndReproduction: String?,
    val linkResource: String?,
    val metadataDate: String?,
    val repository: String?,
    val objectURL: String?,
    val tags: List<TagDto?>?,
    @SerializedName("objectWikidata_URL")
    val objectWikidataUrl: String?,
)

fun MetObjectDto.asMetObjectEntity() = MetObjectEntity(
    objectID = objectID,
    isHighlight = isHighlight,
    accessionNumber = accessionNumber,
    accessionYear = accessionYear,
    primaryImage = primaryImage,
    additionalImages = additionalImages?.filterNotNull(),
    constituents = constituents?.filterNotNull().asConstituentEntities(),
    department = department,
    objectName = objectName,
    title = title,
    culture = culture,
    period = period,
    dynasty = dynasty,
    reign = reign,
    portfolio = portfolio,
    artistRole = artistRole,
    artistPrefix = artistPrefix,
    artistDisplayName = artistDisplayName,
    artistDisplayBio = artistDisplayBio,
    artistSuffix = artistSuffix,
    artistAlphaSort = artistAlphaSort,
    artistNationality = artistNationality,
    artistBeginDate = artistBeginDate,
    artistEndDate = artistEndDate,
    artistGender = artistGender,
    artistWikidataURL = artistWikidataURL,
    artistULANURL = artistULANURL,
    objectDate = objectDate,
    objectBeginDate = objectBeginDate,
    objectEndDate = objectEndDate,
    medium = medium,
    dimensions = dimensions,
    measurements = measurements?.filterNotNull().asMeasurementEntities(),
    creditLine = creditLine,
    geographyType = geographyType,
    city = city,
    state = state,
    county = county,
    country = country,
    region = region,
    subregion = subregion,
    locale = locale,
    locus = locus,
    excavation = excavation,
    river = river,
    classification = classification,
    rightsAndReproduction = rightsAndReproduction,
    linkResource = linkResource,
    metadataDate = metadataDate,
    repository = repository,
    objectURL = objectURL,
    tags = tags?.filterNotNull().asTagEntities(),
    objectWikidataUrl = objectWikidataUrl
)

fun List<MetObjectDto>.asMetObjectEntities() = this.map { entity ->
    entity.asMetObjectEntity()
}